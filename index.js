const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();
const token = process.env.BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/start/, (msg) => {
  const id = msg.chat.id;
  bot.sendMessage(id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:', {
    reply_markup: {
      keyboard: [
        ['üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞', 'üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫'],
        ['üó£ –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', 'üìò –°–ª–æ–≤–∞—Ä—å'],
        ['üñº –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ']
      ],
      resize_keyboard: true
    }
  });
});

const translate = require('@vitalets/google-translate-api');

bot.onText(/üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ä—É—Å/–∞–Ω–≥–ª):');
  bot.once('message', async (msg) => {
    const text = msg.text;

    try {
      const res = await translate(text, { to: detectLanguage(text) });
      bot.sendMessage(chatId, `–ü–µ—Ä–µ–≤–æ–¥: ${res.text}`);
    } catch (err) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
});

function detectLanguage(text) {
  // –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞ ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∏–Ω–∞—á–µ ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  return /^[a-zA-Z]/.test(text) ? 'ru' : 'en';
}

bot.onText(/üó£ –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üó£ –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º! –Ø –Ω–∞—á–Ω—É:\n\nHello! How are you today?");
  startConversation(chatId);
});

function startConversation(chatId) {
  const prompts = [
    "What's your name?",
    "Where are you from?",
    "What do you like to do in your free time?",
    "Do you like learning English?",
    "What's your favorite food?"
  ];

  let step = 0;

  const askNext = () => {
    if (step < prompts.length) {
      bot.sendMessage(chatId, prompts[step]);
      step++;
    } else {
      bot.sendMessage(chatId, "Thanks for chatting with me! üß† Want to try another section?");
    }
  };

  bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
  
    if (text === 'A1') {
      bot.sendMessage(chatId, `üìó –£—Ä–æ–≤–µ–Ω—å A1:\n\n${vocabulary.A1.join('\n')}`);
    } else if (text === 'A2') {
      bot.sendMessage(chatId, `üìò –£—Ä–æ–≤–µ–Ω—å A2:\n\n${vocabulary.A2.join('\n')}`);
    } else if (text === '–°–ª–µ–Ω–≥') {
      bot.sendMessage(chatId, `üìô –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Å–ª–µ–Ω–≥:\n\n${vocabulary.slang.join('\n')}`);
    } else if (text === 'üîô –ù–∞–∑–∞–¥') {
      bot.sendMessage(chatId, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏—Ç–µ /start');
    }
  });
  
  const listener = (msg) => {
    if (msg.chat.id === chatId) {
      askNext();
    }
  };

  bot.on('message', listener);

  askNext();
}

const vocabulary = {
  A1: ["book ‚Äì –∫–Ω–∏–≥–∞", "apple ‚Äì —è–±–ª–æ–∫–æ", "dog ‚Äì —Å–æ–±–∞–∫–∞", "go ‚Äì –∏–¥—Ç–∏", "house ‚Äì –¥–æ–º"],
  A2: ["travel ‚Äì –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å", "yesterday ‚Äì –≤—á–µ—Ä–∞", "often ‚Äì —á–∞—Å—Ç–æ", "because ‚Äì –ø–æ—Ç–æ–º—É —á—Ç–æ", "important ‚Äì –≤–∞–∂–Ω—ã–π"],
  slang: [
    "cool ‚Äì –∫—Ä—É—Ç–æ",
    "bro ‚Äì –±—Ä–∞—Ç–∞–Ω",
    "YOLO ‚Äì –∂–∏–≤—ë–º –æ–¥–∏–Ω —Ä–∞–∑",
    "lit ‚Äì –æ—Ñ–∏–≥–µ–Ω–Ω–æ, –∫–ª–∞—Å—Å–Ω–æ",
    "ghost ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–ø–∞—Å—Ç—å –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π",
    "no cap ‚Äì —á–µ—Å—Ç–Ω–æ, –±–µ–∑ –≤—Ä–∞–Ω—å—è",
    "sus ‚Äì –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π (–æ—Ç —Å–ª–æ–≤–∞ suspicious)",
    "salty ‚Äì –æ–±–∏–∂–µ–Ω–Ω—ã–π, —Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π",
    "flex ‚Äì —Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è",
    "lowkey ‚Äì –Ω–µ–º–Ω–æ–≥–æ, –ø–æ-—Ç–∏—Ö–æ–º—É",
    "highkey ‚Äì —è–≤–Ω–æ, –æ—Ç–∫—Ä—ã—Ç–æ",
    "vibe ‚Äì –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –Ω–∞—Å—Ç—Ä–æ–π",
    "cringe ‚Äì –Ω–µ–ª–æ–≤–∫–æ, —Å—Ç—ã–¥–Ω–æ",
    "savage ‚Äì –∂—ë—Å—Ç–∫–æ, –¥–µ—Ä–∑–∫–æ (–≤ —Ö–æ—Ä–æ—à–µ–º —Å–º—ã—Å–ª–µ)",
    "slay ‚Äì –±–ª–∏—Å—Ç–∞—Ç—å, –¥–µ–ª–∞—Ç—å –∫—Ä—É—Ç–æ",
    "ship ‚Äì —à–∏–ø–ø–µ—Ä–∏—Ç—å, —Ö–æ—Ç–µ—Ç—å –ø–∞—Ä—É –∏–∑ –¥–≤—É—Ö –ª—é–¥–µ–π"
  ]
};

const questions = {
  easy: [
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '–∫–æ—à–∫–∞'", a: "cat" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '—Å–æ–±–∞–∫–∞'", a: "dog" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '—è–±–ª–æ–∫–æ'", a: "apple" }
  ],
  medium: [
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '–ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å'", a: "travel" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '–≤—á–µ—Ä–∞'", a: "yesterday" },
    { q: "–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –æ—Ç 'go'?", a: "went" }
  ],
  hard: [
    { q: "–°–ª–æ–≤–æ 'responsibility' –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫?", a: "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'", a: "entrepreneur" },
    { q: "–°–∏–Ω–æ–Ω–∏–º –∫ —Å–ª–æ–≤—É 'important'?", a: "significant" }
  ]
};

const userState = {};

bot.onText(/\/start/, (msg) => {
  const id = msg.chat.id;
  userState[id] = { step: 0, score: 0, level: null };
  bot.sendMessage(id, `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:`, {
    reply_markup: {
      keyboard: [['Easy'], ['Medium'], ['Hard']],
      one_time_keyboard: true,
      resize_keyboard: true
    }
  });
});

bot.on('message', (msg) => {
  const id = msg.chat.id;
  const text = msg.text.toLowerCase();

  if (!userState[id]) return;

  const state = userState[id];

  if (!state.level && ['easy', 'medium', 'hard'].includes(text)) {
    state.level = text;
    state.step = 0;
    state.score = 0;
    bot.sendMessage(id, `üîç –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${text.toUpperCase()}. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!`);
    sendQuestion(id);
    return;
  }

  if (state.level && state.step < 3) {
    const current = questions[state.level][state.step];
    if (text === current.a.toLowerCase()) {
      bot.sendMessage(id, '‚úÖ –í–µ—Ä–Ω–æ!');
      state.score++;
    } else {
      bot.sendMessage(id, `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${current.a}`);
    }

    state.step++;

    if (state.step < 3) {
      sendQuestion(id);
    } else {
      finishQuiz(id);
    }
  }
});

function sendQuestion(id) {
  const state = userState[id];
  const current = questions[state.level][state.step];
  bot.sendMessage(id, `‚ùì –í–æ–ø—Ä–æ—Å ${state.step + 1}: ${current.q}`);
}

function finishQuiz(id) {
  const state = userState[id];
  const score = state.score;
  let recommendation = '';

  if (score <= 1) {
    recommendation = "üìò –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –±–ª–æ–∫–∞ '100 –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤' –∏ –≥–ª–∞–≥–æ–ª–æ–≤. –¢–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç —É—Ä–æ–≤–µ–Ω—å EASY.";
  } else if (score === 2) {
    recommendation = "üìó –£ —Ç–µ–±—è –µ—Å—Ç—å –æ—Å–Ω–æ–≤–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ø—Ä–æ—Å—Ç—ã–º –¥–∏–∞–ª–æ–≥–∞–º.";
  } else {
    recommendation = "üìï –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é –∏–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º —Å —Ç–µ–∫—Å—Ç–∞–º–∏.";
  }

  bot.sendMessage(id, `üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—ã –Ω–∞–±—Ä–∞–ª: ${score}/3\n\n${recommendation}`);

  bot.sendMessage(id, `–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å?`, {
    reply_markup: {
      keyboard: [['Easy'], ['Medium'], ['Hard']],
      one_time_keyboard: true,
      resize_keyboard: true
    }
  });

  // –û–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
  userState[id] = { step: 0, score: 0, level: null };
}
