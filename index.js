require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const questions = {
  easy: [
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '–∫–æ—à–∫–∞'", a: "cat" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '—Å–æ–±–∞–∫–∞'", a: "dog" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '—è–±–ª–æ–∫–æ'", a: "apple" }
  ],
  medium: [
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '–ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å'", a: "travel" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '–≤—á–µ—Ä–∞'", a: "yesterday" },
    { q: "–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –æ—Ç 'go'?", a: "went" }
  ],
  hard: [
    { q: "–°–ª–æ–≤–æ 'responsibility' –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫?", a: "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'", a: "entrepreneur" },
    { q: "–°–∏–Ω–æ–Ω–∏–º –∫ —Å–ª–æ–≤—É 'important'?", a: "significant" }
  ]
};

const userState = {};

bot.onText(/\/start/, (msg) => {
  const id = msg.chat.id;
  userState[id] = { step: 0, score: 0, level: null };
  bot.sendMessage(id, `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:`, {
    reply_markup: {
      keyboard: [['Easy'], ['Medium'], ['Hard']],
      one_time_keyboard: true,
      resize_keyboard: true
    }
  });
});

bot.on('message', (msg) => {
  const id = msg.chat.id;
  const text = msg.text.toLowerCase();

  if (!userState[id]) return;

  const state = userState[id];

  if (!state.level && ['easy', 'medium', 'hard'].includes(text)) {
    state.level = text;
    state.step = 0;
    state.score = 0;
    bot.sendMessage(id, `üîç –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${text.toUpperCase()}. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!`);
    sendQuestion(id);
    return;
  }

  if (state.level && state.step < 3) {
    const current = questions[state.level][state.step];
    if (text === current.a.toLowerCase()) {
      bot.sendMessage(id, '‚úÖ –í–µ—Ä–Ω–æ!');
      state.score++;
    } else {
      bot.sendMessage(id, `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${current.a}`);
    }

    state.step++;

    if (state.step < 3) {
      sendQuestion(id);
    } else {
      finishQuiz(id);
    }
  }
});

function sendQuestion(id) {
  const state = userState[id];
  const current = questions[state.level][state.step];
  bot.sendMessage(id, `‚ùì –í–æ–ø—Ä–æ—Å ${state.step + 1}: ${current.q}`);
}

function finishQuiz(id) {
  const state = userState[id];
  const score = state.score;
  let recommendation = '';

  if (score <= 1) {
    recommendation = "üìò –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –±–ª–æ–∫–∞ '100 –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤' –∏ –≥–ª–∞–≥–æ–ª–æ–≤. –¢–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç —É—Ä–æ–≤–µ–Ω—å EASY.";
  } else if (score === 2) {
    recommendation = "üìó –£ —Ç–µ–±—è –µ—Å—Ç—å –æ—Å–Ω–æ–≤–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ø—Ä–æ—Å—Ç—ã–º –¥–∏–∞–ª–æ–≥–∞–º.";
  } else {
    recommendation = "üìï –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é –∏–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º —Å —Ç–µ–∫—Å—Ç–∞–º–∏.";
  }

  bot.sendMessage(id, `üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—ã –Ω–∞–±—Ä–∞–ª: ${score}/3\n\n${recommendation}`);

  bot.sendMessage(id, `–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å?`, {
    reply_markup: {
      keyboard: [['Easy'], ['Medium'], ['Hard']],
      one_time_keyboard: true,
      resize_keyboard: true
    }
  });

  // –û–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
  userState[id] = { step: 0, score: 0, level: null };
}
