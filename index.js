const TelegramBot = require('node-telegram-bot-api');
const { default: translate } = require('google-translate-open-api');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = {
  reply_markup: {
    keyboard: [
      ['üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞', 'üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫'],
      ['üó£ –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', 'üìò –°–ª–æ–≤–∞—Ä—å'],
      ['üñº –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ']
    ],
    resize_keyboard: true
  }
};

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
bot.onText(/\/start/, (msg) => {
  const name = msg.from.first_name || "–¥—Ä—É–≥";
  bot.sendMessage(msg.chat.id, `üëã –ü—Ä–∏–≤–µ—Ç, ${name}!\n–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:`, mainMenu);
});

// üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
bot.onText(/üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:');
  bot.once('message', async (answer) => {
    if (answer.chat.id !== chatId) return;
    const text = answer.text;
    const lang = /^[a-zA-Z]/.test(text) ? 'ru' : 'en';

    try {
      const result = await translate(text, {
        tld: "com",
        to: lang
      });
      const translated = result.data[0];
      bot.sendMessage(chatId, `–ü–µ—Ä–µ–≤–æ–¥: ${translated}`);
    } catch (err) {
      console.error(err);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
});

// üó£ –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
bot.onText(/üó£ –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞/, (msg) => {
  const id = msg.chat.id;
  bot.sendMessage(id, "üó£ Let's talk!\nHello! How are you today?");
  const prompts = [
    "What's your name?", "Where are you from?",
    "Do you like learning English?", "What's your hobby?"
  ];
  let step = 0;
  const listener = (msg) => {
    if (msg.chat.id === id && step < prompts.length) {
      bot.sendMessage(id, prompts[step++]);
    } else {
      bot.sendMessage(id, "That was fun! üòé", mainMenu);
      bot.removeListener('message', listener);
    }
  };
  bot.on('message', listener);
});

// üìò –°–ª–æ–≤–∞—Ä—å
const vocabulary = {
  A1: ["book ‚Äì –∫–Ω–∏–≥–∞", "apple ‚Äì —è–±–ª–æ–∫–æ", "dog ‚Äì —Å–æ–±–∞–∫–∞"],
  A2: ["travel ‚Äì –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å", "because ‚Äì –ø–æ—Ç–æ–º—É —á—Ç–æ"],
  slang: ["lit ‚Äì –∫—Ä—É—Ç–æ", "no cap ‚Äì —á–µ—Å—Ç–Ω–æ", "sus ‚Äì –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ"]
};

bot.onText(/üìò –°–ª–æ–≤–∞—Ä—å/, (msg) => {
  bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
    reply_markup: {
      keyboard: [['A1', 'A2'], ['–°–ª–µ–Ω–≥'], ['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  });
});

bot.on('message', (msg) => {
  const id = msg.chat.id;
  const text = msg.text;

  if (text === 'A1') bot.sendMessage(id, vocabulary.A1.join('\n'));
  else if (text === 'A2') bot.sendMessage(id, vocabulary.A2.join('\n'));
  else if (text === '–°–ª–µ–Ω–≥') bot.sendMessage(id, vocabulary.slang.join('\n'));
  else if (text === 'üîô –ù–∞–∑–∞–¥') bot.sendMessage(id, '‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu);
});

// üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏
const imageQuiz = [
  { url: "https://upload.wikimedia.org/wikipedia/commons/1/15/Red_Apple.jpg", answer: "apple" },
  { url: "https://upload.wikimedia.org/wikipedia/commons/3/3a/Cat03.jpg", answer: "cat" }
];
bot.onText(/üñº –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ/, (msg) => {
  const id = msg.chat.id;
  const quiz = imageQuiz[Math.floor(Math.random() * imageQuiz.length)];
  bot.sendPhoto(id, quiz.url, { caption: "–ß—Ç–æ —ç—Ç–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?" });
  bot.once('message', (msg) => {
    const answer = msg.text.toLowerCase();
    if (answer === quiz.answer) {
      bot.sendMessage(id, "‚úÖ –í–µ—Ä–Ω–æ!");
    } else {
      bot.sendMessage(id, `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –≠—Ç–æ –±—ã–ª–æ: ${quiz.answer}`);
    }
  });
});

// üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å 3 —É—Ä–æ–≤–Ω—è–º–∏
const quiz = {
  easy: [
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: ¬´–∫–æ—à–∫–∞¬ª", a: "cat" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: ¬´—è–±–ª–æ–∫–æ¬ª", a: "apple" }
  ],
  medium: [
    { q: "–ü—Ä–æ—à–µ–¥—à–µ–µ –æ—Ç ¬´go¬ª", a: "went" },
    { q: "–°–∏–Ω–æ–Ω–∏–º –∫ ¬´important¬ª", a: "significant" }
  ],
  hard: [
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: ¬´–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å¬ª", a: "entrepreneur" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: ¬´–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å¬ª", a: "responsibility" }
  ]
};

bot.onText(/üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞/, (msg) => {
  bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", {
    reply_markup: {
      keyboard: [['Easy', 'Medium', 'Hard'], ['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true
    }
  });
});

['Easy', 'Medium', 'Hard'].forEach(level => {
  bot.onText(new RegExp(level), (msg) => {
    const id = msg.chat.id;
    const list = quiz[level.toLowerCase()];
    let score = 0, index = 0;

    const ask = () => {
      if (index < list.length) {
        bot.sendMessage(id, list[index].q);
      } else {
        bot.sendMessage(id, `üéØ –ì–æ—Ç–æ–≤–æ! –¢—ã –Ω–∞–±—Ä–∞–ª ${score}/${list.length}`, mainMenu);
      }
    };

    const listener = (msg) => {
      if (msg.chat.id !== id) return;
      const answer = msg.text.toLowerCase();
      if (answer === list[index].a.toLowerCase()) {
        bot.sendMessage(id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!");
        score++;
      } else {
        bot.sendMessage(id, `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Ç–≤–µ—Ç: ${list[index].a}`);
      }
      index++;
      if (index < list.length) {
        ask();
        bot.once('message', listener);
      } else {
        bot.sendMessage(id, `üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${score}/${list.length}`, mainMenu);
      }
    };

    ask();
    bot.once('message', listener);
  });
});
