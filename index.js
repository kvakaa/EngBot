const TelegramBot = require('node-telegram-bot-api');
const { default: translate } = require('google-translate-open-api');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = {
  reply_markup: {
    keyboard: [
      ['üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞', 'üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫'],
      ['üó£ –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', 'üìò –°–ª–æ–≤–∞—Ä—å'],
      ['üñº –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ']
    ],
    resize_keyboard: true
  }
};

// –°—Ç–∞—Ä—Ç
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëá', mainMenu);
});

// üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
bot.onText(/üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:');
  bot.once('message', async (answer) => {
    if (answer.chat.id !== chatId) return;
    const text = answer.text;
    try {
      const lang = /^[a-zA-Z]/.test(text) ? 'ru' : 'en';
      const result = await translate(text, { to: lang });
      bot.sendMessage(chatId, `–ü–µ—Ä–µ–≤–æ–¥: ${result.data[0]}`);
    } catch {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.');
    }
  });
});

// üó£ –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
bot.onText(/üó£ –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞/, (msg) => {
  const id = msg.chat.id;
  bot.sendMessage(id, "üó£ Let's chat!\nHello! How are you today?");
  const prompts = [
    "What's your name?", "Where are you from?",
    "Do you like learning English?", "What's your hobby?"
  ];
  let step = 0;
  const listener = (msg) => {
    if (msg.chat.id === id && step < prompts.length) {
      bot.sendMessage(id, prompts[step++]);
    } else {
      bot.sendMessage(id, "That was fun! üòé");
      bot.removeListener('message', listener);
    }
  };
  bot.on('message', listener);
});

// üìò –°–ª–æ–≤–∞—Ä—å
const vocabulary = {
  A1: ["book ‚Äì –∫–Ω–∏–≥–∞", "apple ‚Äì —è–±–ª–æ–∫–æ", "dog ‚Äì —Å–æ–±–∞–∫–∞"],
  A2: ["travel ‚Äì –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å", "because ‚Äì –ø–æ—Ç–æ–º—É —á—Ç–æ"],
  slang: ["lit ‚Äì –∫—Ä—É—Ç–æ", "no cap ‚Äì —á–µ—Å—Ç–Ω–æ", "sus ‚Äì –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ"]
};

bot.onText(/üìò –°–ª–æ–≤–∞—Ä—å/, (msg) => {
  bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
    reply_markup: {
      keyboard: [['A1', 'A2'], ['–°–ª–µ–Ω–≥'], ['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
});

bot.on('message', (msg) => {
  const id = msg.chat.id;
  const text = msg.text;

  if (text === 'A1') {
    bot.sendMessage(id, vocabulary.A1.join('\n'));
  } else if (text === 'A2') {
    bot.sendMessage(id, vocabulary.A2.join('\n'));
  } else if (text === '–°–ª–µ–Ω–≥') {
    bot.sendMessage(id, vocabulary.slang.join('\n'));
  } else if (text === 'üîô –ù–∞–∑–∞–¥') {
    bot.sendMessage(id, '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', mainMenu);
  }
});

// üñº –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ
const imageQuiz = [
  { url: "https://upload.wikimedia.org/wikipedia/commons/1/15/Red_Apple.jpg", answer: "apple" },
  { url: "https://upload.wikimedia.org/wikipedia/commons/3/3a/Cat03.jpg", answer: "cat" }
];

bot.onText(/üñº –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ/, (msg) => {
  const id = msg.chat.id;
  const quiz = imageQuiz[Math.floor(Math.random() * imageQuiz.length)];
  bot.sendPhoto(id, quiz.url, { caption: "–ß—Ç–æ —ç—Ç–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?" });
  bot.once('message', (msg) => {
    const answer = msg.text.toLowerCase();
    if (answer === quiz.answer) {
      bot.sendMessage(id, "‚úÖ –í–µ—Ä–Ω–æ!");
    } else {
      bot.sendMessage(id, `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –≠—Ç–æ –±—ã–ª–æ: ${quiz.answer}`);
    }
  });
});

// üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
const quiz = {
  easy: [
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: ¬´–∫–æ—à–∫–∞¬ª", a: "cat" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: ¬´—Å–æ–±–∞–∫–∞¬ª", a: "dog" },
    { q: "–ü–µ—Ä–µ–≤–µ–¥–∏: ¬´—è–±–ª–æ–∫–æ¬ª", a: "apple" }
  ]
};

bot.onText(/üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞/, (msg) => {
  bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", {
    reply_markup: {
      keyboard: [['Easy'], ['üîô –ù–∞–∑–∞–¥']],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
});

bot.onText(/Easy/, (msg) => {
  const id = msg.chat.id;
  const questions = quiz.easy;
  let score = 0, index = 0;

  const ask = () => {
    if (index < questions.length) {
      bot.sendMessage(id, questions[index].q);
    } else {
      bot.sendMessage(id, `‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—ã –Ω–∞–±—Ä–∞–ª ${score}/${questions.length}.`, mainMenu);
    }
  };

  const listener = (msg) => {
    if (msg.chat.id !== id) return;
    const userAnswer = msg.text.toLowerCase();
    const correctAnswer = questions[index].a.toLowerCase();

    if (userAnswer === correctAnswer) {
      bot.sendMessage(id, "‚úÖ –í–µ—Ä–Ω–æ!");
      score++;
    } else {
      bot.sendMessage(id, `‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correctAnswer}`);
    }

    index++;
    if (index < questions.length) {
      ask();
      bot.once('message', listener);
    } else {
      bot.sendMessage(id, `üéØ –ò—Ç–æ–≥: ${score}/${questions.length}`, mainMenu);
    }
  };

  ask();
  bot.once('message', listener);
});
